ca65 V2.18 - N/A
Main file   : ./src/IB Mouse Transmit.asm
Current file: ./src/IB Mouse Transmit.asm

000000r 1               .setcpu "65C02"
000000r 1               
000000r 1               .segment "ZEROPAGE"
000000r 1  xx           READ_PTR:     .res 1
000001r 1  xx           WRITE_PTR:    .res 1
000002r 1               
000002r 1               .segment "INPUT_BUFFER"
000000r 1  xx xx xx xx  INPUT_BUFFER: .res $100
000004r 1  xx xx xx xx  
000008r 1  xx xx xx xx  
000100r 1               
000100r 1               .segment "CODE"
000000r 1               
000000r 1               VIA_PORTB  = $9400
000000r 1               VIA_PORTA  = $9401
000000r 1               VIA_DDRB   = $9402
000000r 1               VIA_DDRA   = $9403
000000r 1               VIA_PCR    = $940C
000000r 1               VIA_IFR    = $940D
000000r 1               VIA_IER    = $940E
000000r 1               
000000r 1               ACIA_DATA   = $9000
000000r 1               ACIA_STATUS = $9001
000000r 1               ACIA_CMD    = $9002
000000r 1               ACIA_CTRL   = $9003
000000r 1               
000000r 1               reset:
000000r 1  78             sei            ; Disable interrupts
000001r 1  A2 FF          ldx #$ff
000003r 1  9A             txs
000004r 1               
000004r 1  A9 00          lda #$00
000006r 1  85 rr          sta READ_PTR   ; Initialize the read pointer
000008r 1  85 rr          sta WRITE_PTR  ; Initilize the write pointer
00000Ar 1               
00000Ar 1  8D 03 94       sta VIA_DDRA   ; Set VIA A as input
00000Dr 1  8D 02 94       sta VIA_DDRB   ; Set VIA B as input
000010r 1  A9 82          lda #%10000010 ; Enable IRQ on CA1
000012r 1  8D 0E 94       sta VIA_IER
000015r 1  A9 0F          lda #%00001111 ; Set CA2 to HIGH output, CA1 to positive edge
000017r 1  8D 0C 94       sta VIA_PCR
00001Ar 1               
00001Ar 1  A9 00          lda #$00
00001Cr 1  8D 01 90       sta ACIA_STATUS ; Soft reset (value not important)
00001Fr 1  A9 1F          lda #%00011111  ; N-8-1, 19200 baud
000021r 1  8D 03 90       sta ACIA_CTRL
000024r 1  A9 0B          lda #%00001011  ; No parity, No echo, No interrupts
000026r 1  8D 02 90       sta ACIA_CMD
000029r 1               
000029r 1  58             cli            ; Enable interrupts
00002Ar 1               
00002Ar 1               loop:
00002Ar 1  20 rr rr       jsr buffer_size   ; Is there a new input?
00002Dr 1  F0 FB          beq loop
00002Fr 1  20 rr rr       jsr read_buffer
000032r 1  20 rr rr       jsr send_char
000035r 1  4C rr rr       jmp loop          ; Infinite loop
000038r 1               
000038r 1               ; Write a byte from the A register to the input buffer
000038r 1               ; Modifies: flags, X
000038r 1               write_buffer:
000038r 1  A6 rr          ldx WRITE_PTR
00003Ar 1  9D rr rr       sta INPUT_BUFFER,x
00003Dr 1  E6 rr          inc WRITE_PTR
00003Fr 1  60             rts
000040r 1               
000040r 1               ; Read a byte from the input buffer and load into A register
000040r 1               ; Modifies: flags, X, A
000040r 1               read_buffer:
000040r 1  A6 rr          ldx READ_PTR
000042r 1  BD rr rr       lda INPUT_BUFFER,x
000045r 1  E6 rr          inc READ_PTR
000047r 1  60             rts
000048r 1               
000048r 1               ; Return (in A) the number of bytes in the input buffer
000048r 1               ; Modifies: flags, A
000048r 1               buffer_size:
000048r 1  A5 rr          lda WRITE_PTR
00004Ar 1  38             sec
00004Br 1  E5 rr          sbc READ_PTR
00004Dr 1  60             rts
00004Er 1               
00004Er 1               ; Transmit a byte using the ACIA
00004Er 1               ; Modifies: flags
00004Er 1               send_char:
00004Er 1  8D 00 90       sta ACIA_DATA
000051r 1  48             pha
000052r 1               tx_wait:
000052r 1  AD 01 90       lda ACIA_STATUS
000055r 1  29 10          and #%00010000  ; Check if tx buffer not empty
000057r 1  F0 F9          beq tx_wait     ; Loop if tx buffer not empty
000059r 1  68             pla
00005Ar 1  60             rts
00005Br 1               
00005Br 1               nmi:
00005Br 1               irq:
00005Br 1  48             pha
00005Cr 1  DA             phx
00005Dr 1  AD 0D 94       lda VIA_IFR
000060r 1  29 02          and #%00000010    ; Check if CA1 caused the interrupt
000062r 1  F0 06          beq irq_exit      ; If not, exit
000064r 1  AD 01 94       lda VIA_PORTA     ; Read the data from VIA A
000067r 1  20 rr rr       jsr write_buffer  ; Store to the input buffer
00006Ar 1               irq_exit:
00006Ar 1  FA             plx
00006Br 1  68             pla
00006Cr 1  40             rti
00006Dr 1               
00006Dr 1               .segment "VECTORS"
000000r 1               
000000r 1  rr rr          .word nmi
000002r 1  rr rr          .word reset
000004r 1  rr rr          .word irq
000004r 1               
