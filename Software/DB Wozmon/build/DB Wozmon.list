ca65 V2.18 - N/A
Main file   : ./src/DB Wozmon.asm
Current file: ./src/DB Wozmon.asm

000000r 1               .setcpu "65C02"
000000r 1               .segment "CODE"
000000r 1               
000000r 1               XAML  = $24                            ; Last "opened" location Low
000000r 1               XAMH  = $25                            ; Last "opened" location High
000000r 1               STL   = $26                            ; Store address Low
000000r 1               STH   = $27                            ; Store address High
000000r 1               L     = $28                            ; Hex value parsing Low
000000r 1               H     = $29                            ; Hex value parsing High
000000r 1               YSAV  = $2A                            ; Used to see if hex value is given
000000r 1               MODE  = $2B                            ; $00=XAM, $7F=STOR, $AE=BLOCK XAM
000000r 1               
000000r 1               IN    = $0200                          ; Input buffer
000000r 1               
000000r 1               TERM_DATA   = $9C00
000000r 1               KBD_DATA    = $9D00
000000r 1               
000000r 1               RESET:
000000r 1  A0 80          LDY     #$80           ; Set bit 7 to fall through NOTCR
000002r 1               
000002r 1               NOTCR:
000002r 1  C9 08          CMP     #$08           ; Backspace key?
000004r 1  F0 18          BEQ     BACKSPACE      ; Yes.
000006r 1  C9 1B          CMP     #$1B           ; ESC?
000008r 1  F0 03          BEQ     ESCAPE         ; Yes.
00000Ar 1  C8             INY                    ; Advance text index.
00000Br 1  10 14          BPL     NEXTCHAR       ; Auto ESC if line longer than 127.
00000Dr 1               
00000Dr 1               ESCAPE:
00000Dr 1  A9 5C          LDA     #$5C           ; "\".
00000Fr 1  20 rr rr       JSR     ECHO           ; Output it.
000012r 1               
000012r 1               GETLINE:
000012r 1  A9 0D          LDA     #$0D           ; Send CR
000014r 1  20 rr rr       JSR     ECHO
000017r 1  A9 0A          LDA     #$0A           ; Send LF
000019r 1  20 rr rr       JSR     ECHO
00001Cr 1               
00001Cr 1  A0 01          LDY     #$01           ; Initialize text index.
00001Er 1               BACKSPACE:
00001Er 1  88             DEY                    ; Back up text index.
00001Fr 1  30 F1          BMI     GETLINE        ; Beyond start of line, reinitialize.
000021r 1               
000021r 1               NEXTCHAR:
000021r 1  AD 00 9D       LDA     KBD_DATA       ; Key ready (Not zero)?
000024r 1  F0 FB          BEQ     NEXTCHAR       ; Loop until ready.
000026r 1  99 00 02       STA     IN,Y           ; Add to text buffer.
000029r 1  20 rr rr       JSR     ECHO           ; Display character.
00002Cr 1  C9 0A          CMP     #$0A           ; LF?
00002Er 1  F0 07          BEQ     CR             ; Yes.
000030r 1  C9 0D          CMP     #$0D           ; CR?
000032r 1  F0 03          BEQ     CR             ; Yes.
000034r 1  4C rr rr       JMP     NOTCR          ; No.
000037r 1               
000037r 1               CR:
000037r 1  A0 FF          LDY     #$FF           ; Reset text index.
000039r 1  A9 00          LDA     #$00           ; For XAM mode.
00003Br 1  AA             TAX                    ; X=0.
00003Cr 1               SETBLOCK:
00003Cr 1  0A             ASL
00003Dr 1               SETSTOR:
00003Dr 1  0A             ASL                    ; Leaves $7B if setting STOR mode.
00003Er 1  85 2B          STA     MODE           ; $00 = XAM, $74 = STOR, $B8 = BLOK XAM.
000040r 1               BLSKIP:
000040r 1  C8             INY                    ; Advance text index.
000041r 1               NEXTITEM:
000041r 1  B9 00 02       LDA     IN,Y           ; Get character.
000044r 1  C9 0A          CMP     #$0A           ; LF?
000046r 1  F0 CA          BEQ     GETLINE        ; Yes, done this line.
000048r 1  C9 0D          CMP     #$0D           ; CR?
00004Ar 1  F0 C6          BEQ     GETLINE        ; Yes, done this line.
00004Cr 1  C9 2E          CMP     #$2E           ; "."?
00004Er 1  90 F0          BCC     BLSKIP         ; Skip delimiter.
000050r 1  F0 EA          BEQ     SETBLOCK       ; Set BLOCK XAM mode.
000052r 1  C9 3A          CMP     #$3A           ; ":"?
000054r 1  F0 E7          BEQ     SETSTOR        ; Yes, set STOR mode.
000056r 1  C9 52          CMP     #$52           ; "R"?
000058r 1  F0 3B          BEQ     RUN            ; Yes, run user program.
00005Ar 1  86 28          STX     L              ; $00 -> L.
00005Cr 1  86 29          STX     H              ;    and H.
00005Er 1  84 2A          STY     YSAV           ; Save Y for comparison
000060r 1               
000060r 1               NEXTHEX:
000060r 1  B9 00 02       LDA     IN,Y           ; Get character for hex test.
000063r 1  49 30          EOR     #$30           ; Map digits to $0-9.
000065r 1  C9 0A          CMP     #$0A           ; Digit?
000067r 1  90 06          BCC     DIG            ; Yes.
000069r 1  69 88          ADC     #$88           ; Map letter "A"-"F" to $FA-FF.
00006Br 1  C9 FA          CMP     #$FA           ; Hex letter?
00006Dr 1  90 11          BCC     NOTHEX         ; No, character not hex.
00006Fr 1               DIG:
00006Fr 1  0A             ASL
000070r 1  0A             ASL                    ; Hex digit to MSD of A.
000071r 1  0A             ASL
000072r 1  0A             ASL
000073r 1               
000073r 1  A2 04          LDX     #$04           ; Shift count.
000075r 1               HEXSHIFT:
000075r 1  0A             ASL                    ; Hex digit left, MSB to carry.
000076r 1  26 28          ROL     L              ; Rotate into LSD.
000078r 1  26 29          ROL     H              ; Rotate into MSD's.
00007Ar 1  CA             DEX                    ; Done 4 shifts?
00007Br 1  D0 F8          BNE     HEXSHIFT       ; No, loop.
00007Dr 1  C8             INY                    ; Advance text index.
00007Er 1  D0 E0          BNE     NEXTHEX        ; Always taken. Check next character for hex.
000080r 1               
000080r 1               NOTHEX:
000080r 1  C4 2A          CPY     YSAV           ; Check if L, H empty (no hex digits).
000082r 1  F0 89          BEQ     ESCAPE         ; Yes, generate ESC sequence.
000084r 1               
000084r 1  24 2B          BIT     MODE           ; Test MODE byte.
000086r 1  50 10          BVC     NOTSTOR        ; B6=0 is STOR, 1 is XAM and BLOCK XAM.
000088r 1               
000088r 1  A5 28          LDA     L              ; LSD's of hex data.
00008Ar 1  81 26          STA     (STL,X)        ; Store current 'store index'.
00008Cr 1  E6 26          INC     STL            ; Increment store index.
00008Er 1  D0 B1          BNE     NEXTITEM       ; Get next item (no carry).
000090r 1  E6 27          INC     STH            ; Add carry to 'store index' high order.
000092r 1               TONEXTITEM:
000092r 1  4C rr rr       JMP     NEXTITEM       ; Get next command item.
000095r 1               
000095r 1               RUN:
000095r 1  6C 24 00       JMP     (XAML)         ; Run at current XAM index.
000098r 1               
000098r 1               NOTSTOR:
000098r 1  30 30          BMI     XAMNEXT        ; B7 = 0 for XAM, 1 for BLOCK XAM.
00009Ar 1               
00009Ar 1  A2 02          LDX     #$02           ; Byte count.
00009Cr 1               SETADR:
00009Cr 1  B5 27          LDA     L-1,X          ; Copy hex data to
00009Er 1  95 25          STA     STL-1,X        ;  'store index'.
0000A0r 1  95 23          STA     XAML-1,X       ; And to 'XAM index'.
0000A2r 1  CA             DEX                    ; Next of 2 bytes.
0000A3r 1  D0 F7          BNE     SETADR         ; Loop unless X = 0.
0000A5r 1               
0000A5r 1               NXTPRNT:
0000A5r 1  D0 19          BNE     PRDATA         ; NE means no address to print.
0000A7r 1  A9 0D          LDA     #$0D           ; CR.
0000A9r 1  20 rr rr       JSR     ECHO           ; Output it.
0000ACr 1  A9 0A          LDA     #$0A           ; LF.
0000AEr 1  20 rr rr       JSR     ECHO           ; Output it.
0000B1r 1  A5 25          LDA     XAMH           ; 'Examine index' high-order byte.
0000B3r 1  20 rr rr       JSR     PRBYTE         ; Output it in hex format.
0000B6r 1  A5 24          LDA     XAML           ; Low-order 'examine index' byte.
0000B8r 1  20 rr rr       JSR     PRBYTE         ; Output it in hex format.
0000BBr 1  A9 3A          LDA     #$3A           ; ":".
0000BDr 1  20 rr rr       JSR     ECHO           ; Output it.
0000C0r 1               
0000C0r 1               PRDATA:
0000C0r 1  A9 20          LDA     #$20           ; Blank.
0000C2r 1  20 rr rr       JSR     ECHO           ; Output it.
0000C5r 1  A1 24          LDA     (XAML,X)       ; Get data byte at 'examine index'.
0000C7r 1  20 rr rr       JSR     PRBYTE         ; Output it in hex format.
0000CAr 1               XAMNEXT:
0000CAr 1  86 2B          STX     MODE           ; 0 -> MODE (XAM mode).
0000CCr 1  A5 24          LDA     XAML
0000CEr 1  C5 28          CMP     L              ; Compare 'examine index' to hex data.
0000D0r 1  A5 25          LDA     XAMH
0000D2r 1  E5 29          SBC     H
0000D4r 1  B0 BC          BCS     TONEXTITEM     ; Not less, so no more data to output.
0000D6r 1               
0000D6r 1  E6 24          INC     XAML
0000D8r 1  D0 02          BNE     MOD8CHK        ; Increment 'examine index'.
0000DAr 1  E6 25          INC     XAMH
0000DCr 1               
0000DCr 1               MOD8CHK:
0000DCr 1  A5 24          LDA     XAML           ; Check low-order 'examine index' byte
0000DEr 1  29 07          AND     #$07           ; For MOD 8 = 0
0000E0r 1  10 C3          BPL     NXTPRNT        ; Always taken.
0000E2r 1               
0000E2r 1               PRBYTE:
0000E2r 1  48             PHA                    ; Save A for LSD.
0000E3r 1  4A             LSR
0000E4r 1  4A             LSR
0000E5r 1  4A             LSR                    ; MSD to LSD position.
0000E6r 1  4A             LSR
0000E7r 1  20 rr rr       JSR     PRHEX          ; Output hex digit.
0000EAr 1  68             PLA                    ; Restore A.
0000EBr 1               
0000EBr 1               PRHEX:
0000EBr 1  29 0F          AND     #$0F           ; Mask LSD for hex print.
0000EDr 1  09 30          ORA     #$30           ; Add "0".
0000EFr 1  C9 3A          CMP     #$3A           ; Digit?
0000F1r 1  90 02          BCC     ECHO           ; Yes, output it.
0000F3r 1  69 06          ADC     #$06           ; Add offset for letter.
0000F5r 1               
0000F5r 1               ECHO:
0000F5r 1  8D 00 9C       STA     TERM_DATA      ; Output character.
0000F8r 1  60             RTS                    ; Return.
0000F9r 1               
0000F9r 1               .segment "VECTORS"
000000r 1               
000000r 1  00 0F          .word   $0F00          ; NMI vector
000002r 1  rr rr          .word   RESET          ; RESET vector
000004r 1  00 00          .word   $0000          ; IRQ vector
000004r 1               
