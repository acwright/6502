ca65 V2.18 - N/A
Main file   : ./src/DB LCD Mouse.asm
Current file: ./src/DB LCD Mouse.asm

000000r 1               .setcpu "65C02"
000000r 1               .segment "CODE"
000000r 1               
000000r 1               PORTB   = $8000
000000r 1               PORTA   = $8001
000000r 1               DDRB    = $8002
000000r 1               DDRA    = $8003
000000r 1               
000000r 1               MOUSE_X     = $9C02
000000r 1               MOUSE_Y     = $9C03
000000r 1               MOUSE_W     = $9C04
000000r 1               MOUSE_BTN   = $9C05
000000r 1               
000000r 1               VALUE   = $0300
000000r 1               MOD10   = $0302
000000r 1               RESULT  = $0304
000000r 1               
000000r 1               E       = %10000000
000000r 1               RW      = %01000000
000000r 1               RS      = %00100000
000000r 1               
000000r 1               reset:
000000r 1  A2 FF          ldx #$ff
000002r 1  9A             txs
000003r 1               
000003r 1  A9 FF          lda #%11111111                ; Set all pins on port B to output
000005r 1  8D 02 80       sta DDRB
000008r 1  A9 E0          lda #%11100000                ; Set top 3 pins on port A to output
00000Ar 1  8D 03 80       sta DDRA
00000Dr 1               
00000Dr 1  A9 38          lda #%00111000                ; Set 8-bit mode; 2-line display; 5x8 font
00000Fr 1  20 rr rr       jsr lcd_instruction
000012r 1  A9 0C          lda #%00001100                ; Display on; cursor off; blink off
000014r 1  20 rr rr       jsr lcd_instruction
000017r 1  A9 06          lda #%00000110                ; Increment and shift cursor; don't shift display
000019r 1  20 rr rr       jsr lcd_instruction
00001Cr 1               
00001Cr 1               clear:
00001Cr 1  A9 01          lda #$00000001                ; Clear display
00001Er 1  20 rr rr       jsr lcd_instruction
000021r 1               
000021r 1  A2 00          ldx #0
000023r 1               line_1:                         ; Print the line 1 template
000023r 1  BD rr rr       lda line_1_template,x
000026r 1  F0 07          beq line_2_start
000028r 1  20 rr rr       jsr lcd_write
00002Br 1  E8             inx
00002Cr 1  4C rr rr       jmp line_1
00002Fr 1               
00002Fr 1               line_2_start:
00002Fr 1  A9 C0          lda #($80 | $40)              ; Move to DDRAM address $40 (line 2)
000031r 1  20 rr rr       jsr lcd_instruction
000034r 1               
000034r 1  A2 00          ldx #0
000036r 1               line_2:                         ; Print the line 2 template
000036r 1  BD rr rr       lda line_2_template,x
000039r 1  F0 07          beq load_mouse
00003Br 1  20 rr rr       jsr lcd_write
00003Er 1  E8             inx
00003Fr 1  4C rr rr       jmp line_2
000042r 1               
000042r 1               load_mouse:
000042r 1  A9 48          lda #%01001000                 ; Set CGRAM address 1
000044r 1  20 rr rr       jsr lcd_instruction
000047r 1               
000047r 1  AD rr rr       lda mouse
00004Ar 1  20 rr rr       jsr lcd_write
00004Dr 1  AD rr rr       lda mouse+1
000050r 1  20 rr rr       jsr lcd_write
000053r 1  AD rr rr       lda mouse+2
000056r 1  20 rr rr       jsr lcd_write
000059r 1  AD rr rr       lda mouse+3
00005Cr 1  20 rr rr       jsr lcd_write
00005Fr 1  AD rr rr       lda mouse+4
000062r 1  20 rr rr       jsr lcd_write
000065r 1  AD rr rr       lda mouse+5
000068r 1  20 rr rr       jsr lcd_write
00006Br 1  AD rr rr       lda mouse+6
00006Er 1  20 rr rr       jsr lcd_write
000071r 1  AD rr rr       lda mouse+7
000074r 1  20 rr rr       jsr lcd_write
000077r 1  AD rr rr       lda mouse+8
00007Ar 1  20 rr rr       jsr lcd_write
00007Dr 1  AD rr rr       lda mouse+9
000080r 1  20 rr rr       jsr lcd_write
000083r 1  AD rr rr       lda mouse+10
000086r 1  20 rr rr       jsr lcd_write
000089r 1  AD rr rr       lda mouse+11
00008Cr 1  20 rr rr       jsr lcd_write
00008Fr 1  AD rr rr       lda mouse+12
000092r 1  20 rr rr       jsr lcd_write
000095r 1  AD rr rr       lda mouse+13
000098r 1  20 rr rr       jsr lcd_write
00009Br 1  AD rr rr       lda mouse+14
00009Er 1  20 rr rr       jsr lcd_write
0000A1r 1  AD rr rr       lda mouse+15
0000A4r 1  20 rr rr       jsr lcd_write
0000A7r 1  AD rr rr       lda mouse+16
0000AAr 1  20 rr rr       jsr lcd_write
0000ADr 1  AD rr rr       lda mouse+17
0000B0r 1  20 rr rr       jsr lcd_write
0000B3r 1  AD rr rr       lda mouse+18
0000B6r 1  20 rr rr       jsr lcd_write
0000B9r 1  AD rr rr       lda mouse+19
0000BCr 1  20 rr rr       jsr lcd_write
0000BFr 1  AD rr rr       lda mouse+20
0000C2r 1  20 rr rr       jsr lcd_write
0000C5r 1  AD rr rr       lda mouse+21
0000C8r 1  20 rr rr       jsr lcd_write
0000CBr 1  AD rr rr       lda mouse+22
0000CEr 1  20 rr rr       jsr lcd_write
0000D1r 1  AD rr rr       lda mouse+23
0000D4r 1  20 rr rr       jsr lcd_write
0000D7r 1  AD rr rr       lda mouse+24
0000DAr 1  20 rr rr       jsr lcd_write
0000DDr 1  AD rr rr       lda mouse+25
0000E0r 1  20 rr rr       jsr lcd_write
0000E3r 1  AD rr rr       lda mouse+26
0000E6r 1  20 rr rr       jsr lcd_write
0000E9r 1  AD rr rr       lda mouse+27
0000ECr 1  20 rr rr       jsr lcd_write
0000EFr 1  AD rr rr       lda mouse+28
0000F2r 1  20 rr rr       jsr lcd_write
0000F5r 1  AD rr rr       lda mouse+29
0000F8r 1  20 rr rr       jsr lcd_write
0000FBr 1  AD rr rr       lda mouse+30
0000FEr 1  20 rr rr       jsr lcd_write
000101r 1  AD rr rr       lda mouse+31
000104r 1  20 rr rr       jsr lcd_write
000107r 1               
000107r 1               draw_mouse:
000107r 1  A9 87          lda #($80 | $07)              ; Move to DDRAM address $07 (line 1, pos 7)
000109r 1  20 rr rr       jsr lcd_instruction
00010Cr 1  A9 01          lda #1
00010Er 1  20 rr rr       jsr lcd_write
000111r 1  A9 88          lda #($80 | $08)              ; Move to DDRAM address $08 (line 1, pos 8)
000113r 1  20 rr rr       jsr lcd_instruction
000116r 1  A9 02          lda #2
000118r 1  20 rr rr       jsr lcd_write
00011Br 1  A9 C7          lda #($80 | $47)              ; Move to DDRAM address $47 (line 2, pos 7)
00011Dr 1  20 rr rr       jsr lcd_instruction
000120r 1  A9 03          lda #3
000122r 1  20 rr rr       jsr lcd_write
000125r 1  A9 C8          lda #($80 | $48)              ; Move to DDRAM address $48 (line 2, pos 8)
000127r 1  20 rr rr       jsr lcd_instruction
00012Ar 1  A9 04          lda #4
00012Cr 1  20 rr rr       jsr lcd_write
00012Fr 1               
00012Fr 1               loop:
00012Fr 1  A9 83          lda #($80 | $03)              ; Move to DDRAM address $03 (line 1, pos 3)
000131r 1  20 rr rr       jsr lcd_instruction
000134r 1  AD 02 9C       lda MOUSE_X
000137r 1  20 rr rr       jsr hex2dec
00013Ar 1  20 rr rr       jsr print_result
00013Dr 1  A9 8D          lda #($80 | $0D)              ; Move to DDRAM address $0D (line 1, pos 14)
00013Fr 1  20 rr rr       jsr lcd_instruction
000142r 1  AD 03 9C       lda MOUSE_Y
000145r 1  20 rr rr       jsr hex2dec
000148r 1  20 rr rr       jsr print_result
00014Br 1  A9 C3          lda #($80 | $43)              ; Move to DDRAM address $43 (line 2, pos 3)
00014Dr 1  20 rr rr       jsr lcd_instruction
000150r 1  AD 04 9C       lda MOUSE_W
000153r 1  20 rr rr       jsr hex2dec
000156r 1  20 rr rr       jsr print_result
000159r 1  A9 CD          lda #($80 | $4D)              ; Move to DDRAM address $4D (line 2, pos 14)
00015Br 1  20 rr rr       jsr lcd_instruction
00015Er 1  20 rr rr       jsr button_test_left
000161r 1  20 rr rr       jsr button_test_right
000164r 1  20 rr rr       jsr button_test_middle
000167r 1  4C rr rr       jmp loop
00016Ar 1               
00016Ar 1               button_test_left:
00016Ar 1  AD 05 9C       lda MOUSE_BTN
00016Dr 1  29 01          and #%00000001
00016Fr 1  D0 08          bne button_test_left_pressed
000171r 1  A9 2D          lda #$2D                      ; Dash
000173r 1  20 rr rr       jsr lcd_write
000176r 1  4C rr rr       jmp button_test_left_end
000179r 1               button_test_left_pressed:
000179r 1  A9 4C          lda #$4C                      ; L
00017Br 1  20 rr rr       jsr lcd_write
00017Er 1               button_test_left_end:
00017Er 1  60             rts
00017Fr 1               
00017Fr 1               button_test_right:
00017Fr 1  AD 05 9C       lda MOUSE_BTN
000182r 1  29 02          and #%00000010
000184r 1  D0 08          bne button_test_right_pressed
000186r 1  A9 2D          lda #$2D                      ; Dash
000188r 1  20 rr rr       jsr lcd_write
00018Br 1  4C rr rr       jmp button_test_right_end
00018Er 1               button_test_right_pressed:
00018Er 1  A9 52          lda #$52                      ; R
000190r 1  20 rr rr       jsr lcd_write
000193r 1               button_test_right_end:
000193r 1  60             rts
000194r 1               
000194r 1               button_test_middle:
000194r 1  AD 05 9C       lda MOUSE_BTN
000197r 1  29 04          and #%00000100
000199r 1  D0 08          bne button_test_middle_pressed
00019Br 1  A9 2D          lda #$2D                      ; Dash
00019Dr 1  20 rr rr       jsr lcd_write
0001A0r 1  4C rr rr       jmp button_test_middle_end
0001A3r 1               button_test_middle_pressed:
0001A3r 1  A9 4D          lda #$4D                      ; M
0001A5r 1  20 rr rr       jsr lcd_write
0001A8r 1               button_test_middle_end:
0001A8r 1  60             rts
0001A9r 1               
0001A9r 1               print_result:
0001A9r 1  A2 00          ldx #0
0001ABr 1               print_loop:
0001ABr 1  BD 04 03       lda RESULT,x
0001AEr 1  F0 07          beq print_end
0001B0r 1  20 rr rr       jsr lcd_write
0001B3r 1  E8             inx
0001B4r 1  4C rr rr       jmp print_loop
0001B7r 1               print_end:
0001B7r 1  60             rts
0001B8r 1               
0001B8r 1               lcd_wait:
0001B8r 1  48             pha
0001B9r 1  A9 00          lda #%00000000                ; Port B is input
0001BBr 1  8D 02 80       sta DDRB
0001BEr 1               lcd_busy:
0001BEr 1  A9 40          lda #RW
0001C0r 1  8D 01 80       sta PORTA
0001C3r 1  A9 C0          lda #(RW | E)
0001C5r 1  8D 01 80       sta PORTA
0001C8r 1  AD 00 80       lda PORTB
0001CBr 1  29 80          and #%10000000
0001CDr 1  D0 EF          bne lcd_busy
0001CFr 1               
0001CFr 1  A9 40          lda #RW
0001D1r 1  8D 01 80       sta PORTA
0001D4r 1  A9 FF          lda #%11111111                ; Port B is output
0001D6r 1  8D 02 80       sta DDRB
0001D9r 1  68             pla
0001DAr 1  60             rts
0001DBr 1               
0001DBr 1               lcd_instruction:
0001DBr 1  20 rr rr       jsr lcd_wait
0001DEr 1  8D 00 80       sta PORTB
0001E1r 1  A9 00          lda #0                        ; Clear RS/RW/E bits
0001E3r 1  8D 01 80       sta PORTA
0001E6r 1  A9 80          lda #E                        ; Set E bit to send instruction
0001E8r 1  8D 01 80       sta PORTA
0001EBr 1  A9 00          lda #0                        ; Clear RS/RW/E bits
0001EDr 1  8D 01 80       sta PORTA
0001F0r 1  60             rts
0001F1r 1               
0001F1r 1               lcd_write:
0001F1r 1  20 rr rr       jsr lcd_wait
0001F4r 1  8D 00 80       sta PORTB
0001F7r 1  A9 20          lda #RS                       ; Set RS; Clear RW/E bits
0001F9r 1  8D 01 80       sta PORTA
0001FCr 1  A9 A0          lda #(RS | E)                 ; Set E bit to send instruction
0001FEr 1  8D 01 80       sta PORTA
000201r 1  A9 20          lda #RS                       ; Clear E bits
000203r 1  8D 01 80       sta PORTA
000206r 1  60             rts
000207r 1               
000207r 1               hex2dec:
000207r 1  8D 00 03       sta VALUE
00020Ar 1  A9 00          lda #0
00020Cr 1  8D 01 03       sta VALUE + 1
00020Fr 1  A9 00          lda #0
000211r 1  8D 04 03       sta RESULT        ; Intialize the result
000214r 1  8D 05 03       sta RESULT + 1
000217r 1  8D 06 03       sta RESULT + 2
00021Ar 1               
00021Ar 1               hex2dec_divide:
00021Ar 1  A9 00          lda #0            ; Initialize the remainder to zero
00021Cr 1  8D 02 03       sta MOD10
00021Fr 1  8D 03 03       sta MOD10 + 1
000222r 1  18             clc
000223r 1               
000223r 1  A2 10          ldx #16
000225r 1               hex2dec_loop:
000225r 1  2E 00 03       rol VALUE         ; Rotate quotient and remainder
000228r 1  2E 01 03       rol VALUE + 1
00022Br 1  2E 02 03       rol MOD10
00022Er 1  2E 03 03       rol MOD10 + 1
000231r 1  38             sec               ; A,Y = dividend - divisor
000232r 1  AD 02 03       lda MOD10
000235r 1  E9 0A          sbc #10
000237r 1  A8             tay               ; Save low byte in Y
000238r 1  AD 03 03       lda MOD10 + 1
00023Br 1  E9 00          sbc #0
00023Dr 1  90 06          bcc hex2dec_ignore ; Branch if dividend < divisor
00023Fr 1  8C 02 03       sty MOD10
000242r 1  8D 03 03       sta MOD10 + 1
000245r 1               
000245r 1               hex2dec_ignore:
000245r 1  CA             dex
000246r 1  D0 DD          bne hex2dec_loop
000248r 1  2E 00 03       rol VALUE
00024Br 1  2E 01 03       rol VALUE + 1
00024Er 1               
00024Er 1  AD 02 03       lda MOD10
000251r 1  18             clc
000252r 1  69 30          adc #48           ; ASCII "0"
000254r 1  20 rr rr       jsr push_char
000257r 1               
000257r 1  AD 00 03       lda VALUE         ; If value != 0, then continue dividing
00025Ar 1  0D 01 03       ora VALUE + 1
00025Dr 1  D0 BB          bne hex2dec_divide        ; Branch if value != 0
00025Fr 1  60             rts
000260r 1               
000260r 1               push_char:
000260r 1  48             pha               ; Push new first char onto stack
000261r 1  A0 00          ldy #0
000263r 1               push_char_loop:
000263r 1  B9 04 03       lda RESULT,y      ; Get char on string and put in X
000266r 1  AA             tax
000267r 1  68             pla
000268r 1  99 04 03       sta RESULT,y      ; Pull char off stack and add it to the string
00026Br 1  C8             iny
00026Cr 1  8A             txa
00026Dr 1  48             pha               ; Push char from string onto stack
00026Er 1  D0 F3          bne push_char_loop
000270r 1  68             pla
000271r 1  99 04 03       sta RESULT,y      ; Pull the null off the stack and add to the end of the string
000274r 1  60             rts
000275r 1               
000275r 1  58 3A 2B 30  line_1_template: .asciiz "X:+000 <> Y:+000"
000279r 1  30 30 20 3C  
00027Dr 1  3E 20 59 3A  
000286r 1  57 3A 2B 30  line_2_template: .asciiz "W:+000 <> B: ---"
00028Ar 1  30 30 20 3C  
00028Er 1  3E 20 42 3A  
000297r 1               
000297r 1               mouse:
000297r 1  00 00 02 05    .byte $00, $00, $02, $05, $03, $01, $03, $03
00029Br 1  03 01 03 03  
00029Fr 1  00 00 08 14    .byte $00, $00, $08, $14, $18, $10, $18, $18
0002A3r 1  18 10 18 18  
0002A7r 1  07 07 07 0B    .byte $07, $07, $07, $0B, $12, $08, $04, $08
0002ABr 1  12 08 04 08  
0002AFr 1  1C 1C 1C 18    .byte $1C, $1C, $1C, $18, $08, $00, $00, $00
0002B3r 1  08 00 00 00  
0002B7r 1               
0002B7r 1               .segment "VECTORS"
000000r 1               
000000r 1  00 00          .word $0000
000002r 1  rr rr          .word reset
000004r 1  00 00          .word $0000
000004r 1               
